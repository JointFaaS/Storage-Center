// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/JointFaaS/Storage-Center/status (interfaces: MaintainerClient)

// Package mock_status is a generated GoMock package.
package mock_status

import (
	context "context"
	status "github.com/JointFaaS/Storage-Center/status"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockMaintainerClient is a mock of MaintainerClient interface
type MockMaintainerClient struct {
	ctrl     *gomock.Controller
	recorder *MockMaintainerClientMockRecorder
}

// MockMaintainerClientMockRecorder is the mock recorder for MockMaintainerClient
type MockMaintainerClientMockRecorder struct {
	mock *MockMaintainerClient
}

// NewMockMaintainerClient creates a new mock instance
func NewMockMaintainerClient(ctrl *gomock.Controller) *MockMaintainerClient {
	mock := &MockMaintainerClient{ctrl: ctrl}
	mock.recorder = &MockMaintainerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMaintainerClient) EXPECT() *MockMaintainerClientMockRecorder {
	return m.recorder
}

// ChangeStatus mocks base method
func (m *MockMaintainerClient) ChangeStatus(arg0 context.Context, arg1 *status.StatusRequest, arg2 ...grpc.CallOption) (*status.StatusReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeStatus", varargs...)
	ret0, _ := ret[0].(*status.StatusReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeStatus indicates an expected call of ChangeStatus
func (mr *MockMaintainerClientMockRecorder) ChangeStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeStatus", reflect.TypeOf((*MockMaintainerClient)(nil).ChangeStatus), varargs...)
}

// Invalid mocks base method
func (m *MockMaintainerClient) Invalid(arg0 context.Context, arg1 ...grpc.CallOption) (status.Maintainer_InvalidClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Invalid", varargs...)
	ret0, _ := ret[0].(status.Maintainer_InvalidClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Invalid indicates an expected call of Invalid
func (mr *MockMaintainerClientMockRecorder) Invalid(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invalid", reflect.TypeOf((*MockMaintainerClient)(nil).Invalid), varargs...)
}

// Query mocks base method
func (m *MockMaintainerClient) Query(arg0 context.Context, arg1 *status.QueryRequest, arg2 ...grpc.CallOption) (*status.QueryReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(*status.QueryReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (mr *MockMaintainerClientMockRecorder) Query(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockMaintainerClient)(nil).Query), varargs...)
}

// Register mocks base method
func (m *MockMaintainerClient) Register(arg0 context.Context, arg1 *status.RegisterRequest, arg2 ...grpc.CallOption) (*status.RegisterReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Register", varargs...)
	ret0, _ := ret[0].(*status.RegisterReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register
func (mr *MockMaintainerClientMockRecorder) Register(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockMaintainerClient)(nil).Register), varargs...)
}
